
#! git ====================

	>> windows 设置提交
	git config --global core.autocrlf false
	git config --global core.safecrlf true
	
	>> 下载代码
	git clone ...
	git clone https://github.com/xiaohc/CoachStationSystem
	git clone git@github.com:xiaohc/CoachStationSystem.git
	
	
	>> 切换分支
	git branch -a
	git checkout -b v1.0.0 origin/v1.0.0
	
	>> 更新最新代码
	git pull
	
	>> 提交代码
	git add .
	git status
	git commit -m "修改说明"
	git push
	
	>> 恢复文件的修改内容
	git checkout -- filepath/filename

	>> 设置用户信息
	git config --global user.name "xxx"
	git config --global user.email "xxx@github.com"
	git config --global user.password "yyyy"
	
	>> ssh登录
	ssh-keygen -t rsa -C "xxx@github.com"
	clip < ~/.ssh/id_rsa.pub
		
	>> http访问免密码
	cat ~/.gitconfig
	git config --global credential.helper store

	
#! java lib ==================== 		

	>> 集合判断
	CollectionUtils.isEmpty(collection);
	
	>> 切面测试工具类
	Object o = AopTestUtils.getTargetObject(aopObject);
	ReflectionTestUtils.setField(object, "fieldName", fieldObject);

	>> 复制对象属性
	BeanUtils.copyProperties();
	
	>> 常用类
	org.springframework.util
	
	>> 常用名词
	invoke 激发（某种行动）
	interval 间隔


#! arthas command ==================== 	

	>> debug时，查询类变量当时的取值
	watch com.xxx.biz.impl.Cache getCache '{target, target.CacheManager}' -x 2
	
	>> debug时，条件变量为：类函数调用/变量的特定值
	watch com.xxx.biz.impl.Cache getCache '{target, target.CacheManager}' -x 2 'target.getCacheName()="tmpCache"'
	
	>> debug时，条件变量为：类的特定子类
	watch com.xxx.biz.impl.Cache getCache '{target, target.CacheManager}' -x 2 'target.getClass().name="com.xxx.biz.impl.TmpCache"'

	>> debug时，条件变量的 and 链接
	watch com.xxx.biz.impl.Cache getCache '{target, target.CacheManager}' -x 2 'target.getClass().name="com.xxx.biz.impl.TmpCache" and #cost>2'
	
	
#! windows command ==================== 	

	>> 截图工具
	snippingtool
	
	>> 计算器
	calc
	

#! linux command ==================== 	

	>> 日期转秒
	date -d "2021-05-12 17:02:12" +%s
	
	>> 日期转天
	date -d "2021-05-12 17:02:12" +%j
	
	>> 秒转为日期
	date -d@1606665600 +"%Y-%m-%d %H:%M:%S"

	>> 查询进程使用的文件
	lsof -p ${proc_id}
	
	>> tcpdump网络抓包
	tcpdump -n -i eth2 host 192.168.0.1 and 192.168.0.57 and udp port 7080
	tcpdump -A -nn tcp port 8000
	
	
#! shell demo ==================== 	
	
	>> 模拟终端输入方式1
	echo "yes" | proc1
	
	>> 模拟终端输入方式2
	ssh root@ip_address - tt <<EOF
		ls
		echo "hello world"
	EOF
	
	>> 比较文件并获取差异内容
	sort ${first_file} ${second_file} | uniq -u > ${compare_result_file}
	
	>> 替换文本中的时间内容（正则表达式替换）
	echo ',"time":"2020-02-23_19:33:12",' | sed 's/2020-02-23_19:\([0-9]*:[0-9]*\)/a/g'
	sed -i 's/2020-02-23_\([0-9]*:[0-9]*:[0-9]*\)/yyyy-mm-dd_hh:mi:ss/g' temp.dat

	
#! 学习步骤 ==================== 		
	
	2大步骤：理解问题、设计方案
  
	1、理解问题
		a、收集需求（用例图、流程图）
		b、分析问题
			i、静态分析（类图）
			ii、动态分析（通信图）
	2、设计方案
		a、架构设计（部署图、层图、包图）
		b、详细设计
			i、静态设计（类图、对象图、数据库表）
			ii、动态设计（顺序图、通信图、流程图、状态图）	

	p.s. 总结编写代码步骤（并学会评估工作时长）			
			
#! 总结源码阅读步骤 ==================== 					
	
	1、理解项目
		a、熟练使用项目软件的基础上
			i、它解决了什么问题？
			ii、解决问题的方式？
		b、阅读官方文档
			i、理解项目中的概念（名词解释）
			ii、理解项目技术背景（项目的发展，核心功能变化小，主要是实现技术的变化）
	
	2、收集问题
		a、项目如何设计实现的？
		b、代码如何组织的？
		c、有哪些技巧和思路可以学习？
	
	3、确定目标
		a、代码版本（不用太新，也别太过时）
		b、不应该看完整的代码（大部分的代码都是为了辅助核心代码完成核心逻辑）

	4、建模
		a、通过demo，构建黑盒模型
		b、阅读文档，构建概念模型：架构设计（部署图、层图、包图）
		c、根据模块依赖，找到核心模块
		d、根据类依赖，构建抽象模型
			i、从接口找关系
			ii、从数据结构找实现逻辑
			iii、画静态设计图（类图、对象图、数据库表）

	5、流程梳理（自顶向下）
		a、根据抽象模型，梳理核心流程
			i、画动态设计图（顺序图、通信图、流程图、状态图）
		b、阅读扩展模块，补充执行流程
	
	6、归纳（自底向上）
		a、理解核心流程设计
			i、辅助阅读：找代码用的设计模式，梳理对应代码结构
			ii、辅助阅读：Debug代码（一种验证手段、确认某些细节的方法）
	
	7、版本间的比较阅读
	
	8、延伸，成为专家
		a、与其他项目或技术产生关联（触类旁通）
		b、扩大知识面
			

#! 如何进阶架构师 ==================== 

	答案？： 总结各种问题的解决方案，并了解、对比各种解决方案的优缺点
	
	1、前后端分离协作： yapi、swagger(springfox)
	2、api接口文档：swagger(springfox)
	3、入参、出参校验：javax.validation + 自定义注解
	4、pojo的代码编写简化：lombok
	5、业务复杂度的应对： 错误码+业务异常+业务断言
	6、统一的业务校验问题： 切面 + 自定义注解
	7、spring的webmvc各种注解